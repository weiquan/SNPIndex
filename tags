!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AC_KSEQ_H	kseq.h	29;"	d
ALL_ONE_MASK	4bit_bwt_gen.h	38;"	d
ALL_ONE_MASK	bwt_gen.h	37;"	d
ALL_ONE_MASK	rbwt.h	30;"	d
ALPHABET_SIZE	4bit_bwt_gen.h	29;"	d
ALPHABET_SIZE	bwt_gen.h	28;"	d
ALPHABET_SIZE	rbwt.h	21;"	d
ATTRIBUTE	utils.h	36;"	d
ATTRIBUTE	utils.h	38;"	d
BITS_IN_BYTE	4bit_bwt_gen.h	35;"	d
BITS_IN_BYTE	bwt_gen.h	34;"	d
BITS_IN_BYTE	rbwt.h	27;"	d
BITS_IN_WORD	4bit_bwt_gen.h	34;"	d
BITS_IN_WORD	bwt_gen.h	33;"	d
BITS_IN_WORD	rbwt.h	26;"	d
BITS_PER_NT	4bit_bntseq.c	167;"	d	file:
BITS_PER_OCC_VALUE	4bit_bwt_gen.h	41;"	d
BITS_PER_OCC_VALUE	bwt_gen.h	40;"	d
BITS_PER_OCC_VALUE	rbwt.h	33;"	d
BIT_PER_CHAR	4bit_bwt_gen.h	30;"	d
BIT_PER_CHAR	bwt_gen.h	29;"	d
BIT_PER_CHAR	rbwt.h	22;"	d
BWA_BWT_H	bwt.h	29;"	d
BWA_UBYTE	bntseq.h	35;"	d
BWA_UBYTE	bwt.h	37;"	d
BWT	4bit_bwt_gen.h	/^typedef struct BWT {$/;"	s
BWT	4bit_bwt_gen.h	/^} BWT;$/;"	t	typeref:struct:BWT
BWT	bwt_gen.h	/^typedef struct BWT {$/;"	s
BWT	bwt_gen.h	/^} BWT;$/;"	t	typeref:struct:BWT
BWTClearTrailingBwtCode	4bit_bwt_gen.c	/^static void BWTClearTrailingBwtCode(BWT *bwt)$/;"	f	file:
BWTClearTrailingBwtCode	bwt_gen.c	/^void BWTClearTrailingBwtCode(BWT *bwt)$/;"	f
BWTCreate	4bit_bwt_gen.c	/^static BWT *BWTCreate(const unsigned int textLength, DECODE_TABLE_T *decodeTable)$/;"	f	file:
BWTCreate	bwt_gen.c	/^BWT *BWTCreate(const unsigned int textLength, unsigned int *decodeTable)$/;"	f
BWTFileSizeInWord	4bit_bwt_gen.c	/^static unsigned int BWTFileSizeInWord(const unsigned int numChar)$/;"	f	file:
BWTFileSizeInWord	bwt_gen.c	/^static unsigned int BWTFileSizeInWord(const unsigned int numChar)$/;"	f	file:
BWTFree	4bit_bwt_gen.c	/^static void BWTFree(BWT *bwt)$/;"	f	file:
BWTFree	bwt_gen.c	/^void BWTFree(BWT *bwt)$/;"	f
BWTGenerateOccValueFromBwt	4bit_bwt_gen.c	/^static void BWTGenerateOccValueFromBwt(const unsigned int*  bwt, unsigned int* __restrict occValue,$/;"	f	file:
BWTGenerateOccValueFromBwt	bwt_gen.c	/^void BWTGenerateOccValueFromBwt(const unsigned int*  bwt, unsigned int* __restrict occValue,$/;"	f
BWTINC_INSERT_SORT_NUM_ITEM	4bit_bwt_gen.h	49;"	d
BWTINC_INSERT_SORT_NUM_ITEM	bwt_gen.h	48;"	d
BWTInc	4bit_bwt_gen.h	/^typedef struct BWTInc {$/;"	s
BWTInc	4bit_bwt_gen.h	/^} BWTInc;$/;"	t	typeref:struct:BWTInc
BWTInc	bwt_gen.h	/^typedef struct BWTInc {$/;"	s
BWTInc	bwt_gen.h	/^} BWTInc;$/;"	t	typeref:struct:BWTInc
BWTIncBuildBwt	4bit_bwt_gen.c	/^static void BWTIncBuildBwt(unsigned int*  seq, const unsigned int *relativeRank, const unsigned int numChar,$/;"	f	file:
BWTIncBuildBwt	bwt_gen.c	/^static void BWTIncBuildBwt(unsigned int*  seq, const unsigned int *relativeRank, const unsigned int numChar,$/;"	f	file:
BWTIncBuildPackedBwt	4bit_bwt_gen.c	/^static void BWTIncBuildPackedBwt(const unsigned int *relativeRank, unsigned int* __restrict bwt, const unsigned int numChar,$/;"	f	file:
BWTIncBuildPackedBwt	bwt_gen.c	/^static void BWTIncBuildPackedBwt(const unsigned int *relativeRank, unsigned int* __restrict bwt, const unsigned int numChar,$/;"	f	file:
BWTIncBuildRelativeRank	4bit_bwt_gen.c	/^static void BWTIncBuildRelativeRank(unsigned int* __restrict sortedRank, unsigned int* __restrict seq,$/;"	f	file:
BWTIncBuildRelativeRank	bwt_gen.c	/^static void BWTIncBuildRelativeRank(unsigned int* __restrict sortedRank, unsigned int* __restrict seq,$/;"	f	file:
BWTIncConstruct	4bit_bwt_gen.c	/^static void BWTIncConstruct(BWTInc *bwtInc, const unsigned int numChar)$/;"	f	file:
BWTIncConstruct	bwt_gen.c	/^static void BWTIncConstruct(BWTInc *bwtInc, const unsigned int numChar)$/;"	f	file:
BWTIncConstructFromPacked	4bit_bwt_gen.c	/^static BWTInc *BWTIncConstructFromPacked(const char *inputFileName, const float targetNBit,$/;"	f	file:
BWTIncConstructFromPacked	bwt_gen.c	/^BWTInc *BWTIncConstructFromPacked(const char *inputFileName, const float targetNBit,$/;"	f
BWTIncCreate	4bit_bwt_gen.c	/^static BWTInc *BWTIncCreate(const unsigned int textLength, const float targetNBit,$/;"	f	file:
BWTIncCreate	bwt_gen.c	/^BWTInc *BWTIncCreate(const unsigned int textLength, const float targetNBit,$/;"	f
BWTIncFree	4bit_bwt_gen.c	/^static void BWTIncFree(BWTInc *bwtInc)$/;"	f	file:
BWTIncFree	bwt_gen.c	/^void BWTIncFree(BWTInc *bwtInc)$/;"	f
BWTIncGetAbsoluteRank	4bit_bwt_gen.c	/^static unsigned int BWTIncGetAbsoluteRank(BWT *bwt, unsigned int* __restrict absoluteRank, unsigned int* __restrict seq,$/;"	f	file:
BWTIncGetAbsoluteRank	bwt_gen.c	/^static unsigned int BWTIncGetAbsoluteRank(BWT *bwt, unsigned int* __restrict absoluteRank, unsigned int* __restrict seq,$/;"	f	file:
BWTIncMergeBwt	4bit_bwt_gen.c	/^static void BWTIncMergeBwt(const unsigned int *sortedRank, const unsigned int* oldBwt, const unsigned int *insertBwt,$/;"	f	file:
BWTIncMergeBwt	bwt_gen.c	/^static void BWTIncMergeBwt(const unsigned int *sortedRank, const unsigned int* oldBwt, const unsigned int *insertBwt,$/;"	f	file:
BWTIncPutPackedTextToRank	4bit_bwt_gen.c	/^static void BWTIncPutPackedTextToRank(const unsigned int *packedText, unsigned int* __restrict rank,$/;"	f	file:
BWTIncPutPackedTextToRank	bwt_gen.c	/^static void BWTIncPutPackedTextToRank(const unsigned int *packedText, unsigned int* __restrict rank,$/;"	f	file:
BWTIncSetBuildSizeAndTextAddr	4bit_bwt_gen.c	/^static void BWTIncSetBuildSizeAndTextAddr(BWTInc *bwtInc)$/;"	f	file:
BWTIncSetBuildSizeAndTextAddr	bwt_gen.c	/^static void BWTIncSetBuildSizeAndTextAddr(BWTInc *bwtInc)$/;"	f	file:
BWTIncSortKey	4bit_bwt_gen.c	/^static void BWTIncSortKey(unsigned int* __restrict key, unsigned int* __restrict seq, const unsigned int numItem)$/;"	f	file:
BWTIncSortKey	bwt_gen.c	/^static void BWTIncSortKey(unsigned int* __restrict key, unsigned int* __restrict seq, const unsigned int numItem)$/;"	f	file:
BWTOccValue	4bit_bwt_gen.c	/^static unsigned int BWTOccValue(const BWT *bwt, unsigned int index, const unsigned int character) $/;"	f	file:
BWTOccValue	bwt_gen.c	/^unsigned int BWTOccValue(const BWT *bwt, unsigned int index, const unsigned int character) {$/;"	f
BWTOccValueExplicit	4bit_bwt_gen.c	/^static inline unsigned int BWTOccValueExplicit(const BWT *bwt, const unsigned int occIndexExplicit,$/;"	f	file:
BWTOccValueExplicit	bwt_gen.c	/^static inline unsigned int BWTOccValueExplicit(const BWT *bwt, const unsigned int occIndexExplicit,$/;"	f	file:
BWTOccValueExplicit	rbwt.c	/^static inline unsigned int BWTOccValueExplicit(const rbwt_t *bwt, const unsigned int occExplicitIndex,$/;"	f	file:
BWTOccValueMajorSizeInWord	4bit_bwt_gen.c	/^static unsigned int BWTOccValueMajorSizeInWord(const unsigned int numChar)$/;"	f	file:
BWTOccValueMajorSizeInWord	bwt_gen.c	/^static unsigned int BWTOccValueMajorSizeInWord(const unsigned int numChar)$/;"	f	file:
BWTOccValueMinorSizeInWord	4bit_bwt_gen.c	/^static unsigned int BWTOccValueMinorSizeInWord(const unsigned int numChar)$/;"	f	file:
BWTOccValueMinorSizeInWord	bwt_gen.c	/^static unsigned int BWTOccValueMinorSizeInWord(const unsigned int numChar)$/;"	f	file:
BWTResidentSizeInWord	4bit_bwt_gen.c	/^static unsigned int BWTResidentSizeInWord(const unsigned int numChar) {$/;"	f	file:
BWTResidentSizeInWord	bwt_gen.c	/^static unsigned int BWTResidentSizeInWord(const unsigned int numChar) {$/;"	f	file:
BWTSaveBwtCodeAndOcc	4bit_bwt_gen.c	/^static void BWTSaveBwtCodeAndOcc(const BWT *bwt, const char *bwtFileName, const char *occValueFileName)$/;"	f	file:
BWTSaveBwtCodeAndOcc	bwt_gen.c	/^void BWTSaveBwtCodeAndOcc(const BWT *bwt, const char *bwtFileName, const char *occValueFileName)$/;"	f
BWT_BNTSEQ_H	bntseq.h	29;"	d
BWT_GEN_H	bwt_gen.h	26;"	d
BYTES_IN_WORD	4bit_bwt_gen.h	36;"	d
BYTES_IN_WORD	bwt_gen.h	35;"	d
BYTES_IN_WORD	rbwt.h	28;"	d
BYTE_PER_WORD	mixRef.c	56;"	d	file:
BackwardDNAOccCount	4bit_bwt_gen.c	/^static unsigned int BackwardDNAOccCount(const unsigned int*  dna, const unsigned int index, const unsigned int character,$/;"	f	file:
BackwardDNAOccCount	bwt_gen.c	/^static unsigned int BackwardDNAOccCount(const unsigned int*  dna, const unsigned int index, const unsigned int character,$/;"	f	file:
BackwardDNAOccCount	rbwt.c	/^static inline unsigned int BackwardDNAOccCount(const unsigned int*  dna, const unsigned int index, const unsigned int character,$/;"	f	file:
BitPerBytePackedChar	4bit_bwt_gen.c	/^static unsigned int BitPerBytePackedChar(const unsigned int alphabetSize)$/;"	f	file:
BitPerBytePackedChar	bwt_gen.c	/^static unsigned int BitPerBytePackedChar(const unsigned int alphabetSize)$/;"	f	file:
BitPerWordPackedChar	4bit_bwt_gen.c	/^static unsigned int BitPerWordPackedChar(const unsigned int alphabetSize)$/;"	f	file:
BitPerWordPackedChar	bwt_gen.c	/^static unsigned int BitPerWordPackedChar(const unsigned int alphabetSize)$/;"	f	file:
CC	Makefile	/^CC=			gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS=		-g  -O2 $/;"	m
CHAR_IN_WORD	mixRef.c	26;"	d	file:
CHAR_PER_BYTE	4bit_bwt_gen.h	32;"	d
CHAR_PER_BYTE	bwt_gen.h	31;"	d
CHAR_PER_BYTE	mixRef.c	55;"	d	file:
CHAR_PER_BYTE	rbwt.h	24;"	d
CHAR_PER_ITERATION	4bit_bwt_gen.c	382;"	d	file:
CHAR_PER_WORD	4bit_bwt_gen.h	31;"	d
CHAR_PER_WORD	bwt_gen.h	30;"	d
CHAR_PER_WORD	mixRef.c	57;"	d	file:
CHAR_PER_WORD	rbwt.h	23;"	d
CHRID_SIZE	hapmap.c	23;"	d	file:
COUNT_BITS_PER_CHAR	4bit_bwt_gen.c	52;"	d	file:
COUNT_BITS_PER_CHAR	rbwt.h	52;"	d
CXX	Makefile	/^CXX=		g++$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS=	$(CFLAGS)$/;"	m
C_sa_intv	index1.c	/^int C_sa_intv = 32;$/;"	v
ConvertBytePackedToWordPacked	4bit_bwt_gen.c	/^static void ConvertBytePackedToWordPacked(const unsigned char *input, unsigned int *output, const unsigned int alphabetSize,$/;"	f	file:
ConvertBytePackedToWordPacked	bwt_gen.c	/^static void ConvertBytePackedToWordPacked(const unsigned char *input, unsigned int *output, const unsigned int alphabetSize,$/;"	f	file:
DECODE_TABLE_T	4bit_bwt_gen.h	60;"	d
DECODE_TABLE_T	rbwt.h	56;"	d
DFLAGS	Makefile	/^DFLAGS=		-DMAIN_INDEX#-DHAVE_PTHREAD #-DDEBUG#-D_FILE_OFFSET_BITS=64 $/;"	m
DNA_OCC_CNT_TABLE_SIZE_IN_WORD	4bit_bwt_gen.h	39;"	d
DNA_OCC_CNT_TABLE_SIZE_IN_WORD	bwt_gen.h	38;"	d
DNA_OCC_CNT_TABLE_SIZE_IN_WORD	rbwt.h	31;"	d
DNA_OCC_SUM_EXCEPTION	4bit_bwt_gen.h	58;"	d
DNA_OCC_SUM_EXCEPTION	bwt_gen.h	57;"	d
EQUAL_KEY_THRESHOLD	4bit_bwt_gen.c	654;"	d	file:
EQUAL_KEY_THRESHOLD	bwt_gen.c	642;"	d	file:
FALSE	4bit_bwt_gen.h	47;"	d
FALSE	bwt_gen.h	46;"	d
ForwardDNAAllOccCountNoLimit	4bit_bwt_gen.c	/^static void ForwardDNAAllOccCountNoLimit(const unsigned int*  dna, const unsigned int index,$/;"	f	file:
ForwardDNAAllOccCountNoLimit	bwt_gen.c	/^static void ForwardDNAAllOccCountNoLimit(const unsigned int*  dna, const unsigned int index,$/;"	f	file:
ForwardDNAOccCount	4bit_bwt_gen.c	/^static unsigned int ForwardDNAOccCount(const unsigned int*  dna, const unsigned int index, const unsigned int character,$/;"	f	file:
ForwardDNAOccCount	bwt_gen.c	/^static unsigned int ForwardDNAOccCount(const unsigned int*  dna, const unsigned int index, const unsigned int character,$/;"	f	file:
ForwardDNAOccCount	rbwt.c	/^static inline unsigned int ForwardDNAOccCount(const unsigned int *dna, const unsigned int index, const unsigned int character,$/;"	f	file:
GenerateDNAOccCountTable	4bit_bwt_gen.c	/^static void GenerateDNAOccCountTable(DECODE_TABLE_T *dnaDecodeTable)$/;"	f	file:
GenerateDNAOccCountTable	bwt_gen.c	/^static void GenerateDNAOccCountTable(unsigned int *dnaDecodeTable)$/;"	f	file:
GenerateDNAOccCountTable	rbwt.c	/^void GenerateDNAOccCountTable(DECODE_TABLE_T *dnaDecodeTable)$/;"	f
INCLUDES	Makefile	/^INCLUDES=	$/;"	m
INSERT_SORT_NUM_ITEM	QSufSort.h	33;"	d
KEY	QSufSort.h	32;"	d
KSEQ_DECLARE	kseq.h	228;"	d
KSEQ_INIT	kseq.h	226;"	d
KSEQ_INIT	localPattern.c	/^KSEQ_INIT(gzFile, gzread)$/;"	f
KSEQ_INIT	snpSeg.c	/^KSEQ_INIT(gzFile, gzread)$/;"	f
KSEQ_INIT2	kseq.h	220;"	d
KSTREAM_INIT	kseq.h	143;"	d
KSTRING_T	kseq.h	80;"	d
KS_SEP_LINE	kseq.h	37;"	d
KS_SEP_MAX	kseq.h	38;"	d
KS_SEP_SPACE	kseq.h	35;"	d
KS_SEP_TAB	kseq.h	36;"	d
L2	bwt.h	/^	bwtint_t L2[5]; \/\/ C(), cumulative count$/;"	m	struct:__anon7
LH3_UTILS_H	utils.h	29;"	d
LIBS	Makefile	/^LIBS=		-lm -lz -lpthread $/;"	m
LKT_build_lookuptable	LookUpTable.c	/^void LKT_build_lookuptable(const char *fn_pac, lookupTable_t *lkt)$/;"	f
LKT_destroy	LookUpTable.c	/^void LKT_destroy(lookupTable_t *lkt)$/;"	f
LKT_init	LookUpTable.c	/^lookupTable_t *LKT_init(const int maxLookupLen)$/;"	f
LKT_lookup_sa	LookUpTable.h	/^static inline void LKT_lookup_sa(lookupTable_t *lkt, const uint8_t *seq, int from, int to, uint32_t *l, uint32_t *k)$/;"	f
LKT_output	LookUpTable.c	/^void LKT_output(const char *fn_lkt, lookupTable_t *lkt)$/;"	f
LKT_restore	LookUpTable.c	/^lookupTable_t *LKT_restore(const char *fn_lkt)$/;"	f
LKT_seq2LktItem	LookUpTable.c	/^uint32_t LKT_seq2LktItem(const uint8_t *seq, int from, int to)$/;"	f
LOCALPATTERN	localPattern.h	2;"	d
L_LP	rbwt.c	336;"	d	file:
MASK_4BIT	4bit_bntseq.c	164;"	d	file:
MASK_CHAR	rbwt.h	47;"	d
MASK_CHAR_IN_WORD	4bit_bwt_gen.c	53;"	d	file:
MASK_CHAR_IN_WORD	rbwt.h	53;"	d
MATCH	rbwt.h	49;"	d
MIN_AVAILABLE_WORD	4bit_bwt_gen.c	300;"	d	file:
MIXREF_H	mixRef.h	2;"	d
NT_A	rbwt.h	40;"	d
NT_C	rbwt.h	41;"	d
NT_DOLLOR	rbwt.h	45;"	d
NT_G	rbwt.h	42;"	d
NT_PER_BYTE	4bit_bntseq.c	166;"	d	file:
NT_SHARP	rbwt.h	44;"	d
NT_T	rbwt.h	43;"	d
N_nt	4bit_bntseq.c	165;"	d	file:
OBJS	Makefile	/^OBJS=		utils.o bwt.o bwtio.o  is.o \\$/;"	m
OCC_INTERVAL	4bit_bwt_gen.h	43;"	d
OCC_INTERVAL	bwt.h	34;"	d
OCC_INTERVAL	bwt_gen.h	42;"	d
OCC_INTERVAL	rbwt.h	35;"	d
OCC_INTERVAL_MAJOR	4bit_bwt_gen.h	44;"	d
OCC_INTERVAL_MAJOR	bwt_gen.h	43;"	d
OCC_INTERVAL_MAJOR	rbwt.h	36;"	d
OCC_VALUE_PER_WORD	4bit_bwt_gen.h	42;"	d
OCC_VALUE_PER_WORD	bwt_gen.h	41;"	d
OCC_VALUE_PER_WORD	rbwt.h	34;"	d
POWER_OF_2	LookUpTable.c	27;"	d	file:
PROG	Makefile	/^PROG=		index$/;"	m
QSufSortBucketSort	QSufSort.c	/^static void QSufSortBucketSort(int* __restrict V, int* __restrict I, const int numChar, const int alphabetSize) {$/;"	f	file:
QSufSortChoosePivot	QSufSort.c	/^static int QSufSortChoosePivot(int* __restrict V, int* __restrict I, const int lowestPos, $/;"	f	file:
QSufSortGenerateSaFromInverse	QSufSort.c	/^void QSufSortGenerateSaFromInverse(const int* V, int* __restrict I, const int numChar) {$/;"	f
QSufSortInsertSortSplit	QSufSort.c	/^static void QSufSortInsertSortSplit(int* __restrict V, int* __restrict I, const int lowestPos, $/;"	f	file:
QSufSortSortSplit	QSufSort.c	/^static void QSufSortSortSplit(int* __restrict V, int* __restrict I, const int lowestPos, $/;"	f	file:
QSufSortSuffixSort	QSufSort.c	/^void QSufSortSuffixSort(int* __restrict V, int* __restrict I, const int numChar, const int largestInputSymbol, $/;"	f
QSufSortTransform	QSufSort.c	/^static int QSufSortTransform(int* __restrict V, int* __restrict I, const int numChar, const int largestInputSymbol, $/;"	f	file:
RBWT_H	rbwt.h	2;"	d
R_add1	4bit_bntseq.c	/^static uint8_t *R_add1(const kseq_t *seq, bntseq_t *bns, uint8_t *pac, int64_t *m_pac, int *m_seqs, int *m_holes, bntamb1_t **q)$/;"	f	file:
R_bns_cnt_ambi	4bit_bntseq.c	/^int R_bns_cnt_ambi(const bntseq_t *bns, int64_t pos_f, int len, int *ref_id)$/;"	f
R_bns_depos	bntseq.h	/^static inline int64_t R_bns_depos(const bntseq_t *bns, int64_t pos, int *is_rev)$/;"	f
R_bns_destroy	4bit_bntseq.c	/^void R_bns_destroy(bntseq_t *bns)$/;"	f
R_bns_dump	4bit_bntseq.c	/^void R_bns_dump(const bntseq_t *bns, const char *prefix)$/;"	f
R_bns_fasta2bntseq	4bit_bntseq.c	/^int64_t R_bns_fasta2bntseq(gzFile fp_fa, const char *prefix)$/;"	f
R_bns_restore	4bit_bntseq.c	/^bntseq_t *R_bns_restore(const char *prefix)$/;"	f
R_bns_restore_core	4bit_bntseq.c	/^bntseq_t *R_bns_restore_core(const char *ann_filename, const char* amb_filename, const char* pac_filename)$/;"	f
R_fa2pac	4bit_bntseq.c	/^int R_fa2pac(int argc, char *argv[])$/;"	f
Rbwt2_destroy	rbwt.c	/^void Rbwt2_destroy(rbwt2_t *rbwt2)$/;"	f
Rbwt2_init	rbwt.c	/^rbwt2_t *Rbwt2_init(const char *prefix)$/;"	f
Rbwt2_save_sa	rbwt.c	/^void Rbwt2_save_sa(const char *prefix,const char *fn_localpattern)$/;"	f
Rbwt_BWTOccValue	rbwt.c	/^unsigned int Rbwt_BWTOccValue(const rbwt_t *bwt, unsigned int index, const unsigned int character) $/;"	f
Rbwt_BWTOccValue2	rbwt.c	/^uint32_t Rbwt_BWTOccValue2(const rbwt_t *bwt, unsigned int index, const unsigned int character, unsigned int *occSharp)$/;"	f
Rbwt_back_bwt_sa	rbwt.c	/^uint32_t Rbwt_back_bwt_sa(rbwt_t *bwt,  uint32_t sa_index)$/;"	f
Rbwt_bw_search	rbwt.c	/^static inline int Rbwt_bw_search(rbwt_t *bwt, const SaIndexRange *in_saIndex, uint8_t c, SaIndexRange *out_saIndex)$/;"	f	file:
Rbwt_bwt2nt	rbwt.h	/^static inline uint8_t Rbwt_bwt2nt(rbwt_t* bwt, uint32_t pos)$/;"	f
Rbwt_bwt_bwtgen	4bit_bwt_gen.c	/^void Rbwt_bwt_bwtgen(const char *fn_pac, const char *fn)$/;"	f
Rbwt_bwt_bwtgen_main	4bit_bwt_gen.c	/^int Rbwt_bwt_bwtgen_main(int argc, char *argv[])$/;"	f
Rbwt_destroy	rbwt.c	/^void Rbwt_destroy(rbwt_t* bwt)$/;"	f
Rbwt_exact_match_backward	rbwt.c	/^int Rbwt_exact_match_backward(const rbwt_t *bwt, const uint8_t *query, const int qlen, uint32_t *k, uint32_t *l)$/;"	f
Rbwt_exact_match_forward	rbwt.c	/^int Rbwt_exact_match_forward(const rbwt_t *rbwt, const uint8_t *query, const int qlen, uint32_t *k, uint32_t *l)$/;"	f
Rbwt_for_bwt_sa	rbwt.c	/^uint32_t Rbwt_for_bwt_sa(rbwt_t *bwt,  uint32_t sa_index)$/;"	f
Rbwt_gen_sa	rbwt.c	/^void Rbwt_gen_sa(rbwt_t *bwt, const sharp2Ri_t *sharp2Ri,  const int direction)$/;"	f
Rbwt_init	rbwt.c	/^rbwt_t *Rbwt_init(const char *fn_bwt, const char* fn_occ)$/;"	f
Rbwt_restore_bwt	rbwt.c	/^void Rbwt_restore_bwt(rbwt_t *bwt, const char *fn_bwt)$/;"	f
Rbwt_restore_occ	rbwt.c	/^void Rbwt_restore_occ( rbwt_t *bwt, const char *fn_occ)$/;"	f
Rbwt_restore_sa	rbwt.c	/^void Rbwt_restore_sa(rbwt_t *rbwt, const char *fn_sa)$/;"	f
Rbwt_sharp2Ri_destroy	rbwt.c	/^void Rbwt_sharp2Ri_destroy(sharp2Ri_t *sharp2Ri)$/;"	f
Rbwt_sharp2Ri_init	rbwt.c	/^sharp2Ri_t *Rbwt_sharp2Ri_init(const char *fn_localpattern)$/;"	f
SA_INTERVAL	rbwt.c	426;"	d	file:
SUBDIRS	Makefile	/^SUBDIRS=	. $/;"	m
SaIndexRange	4bit_bwt_gen.h	/^typedef struct SaIndexRange {$/;"	s
SaIndexRange	4bit_bwt_gen.h	/^} SaIndexRange;$/;"	t	typeref:struct:SaIndexRange
SaIndexRange	bwt_gen.h	/^typedef struct SaIndexRange {$/;"	s
SaIndexRange	bwt_gen.h	/^} SaIndexRange;$/;"	t	typeref:struct:SaIndexRange
SaIndexRange	rbwt.h	/^typedef struct SaIndexRange {$/;"	s
SaIndexRange	rbwt.h	/^} SaIndexRange;$/;"	t	typeref:struct:SaIndexRange
TMP_SIZE	hapmap.c	24;"	d	file:
TRUE	4bit_bwt_gen.h	46;"	d
TRUE	bwt_gen.h	45;"	d
TextLengthFromBytePacked	4bit_bwt_gen.c	/^static unsigned int TextLengthFromBytePacked(unsigned int bytePackedLength, unsigned int bitPerChar,$/;"	f	file:
TextLengthFromBytePacked	bwt_gen.c	/^static unsigned int TextLengthFromBytePacked(unsigned int bytePackedLength, unsigned int bitPerChar,$/;"	f	file:
UNMATCH	rbwt.h	50;"	d
WIN_MAX_SNP_NUM	localPattern.c	26;"	d	file:
WIN_MAX_SNP_NUM	snpSeg.c	167;"	d	file:
_4BIT_BWT_GEN_H	4bit_bwt_gen.h	26;"	d
_HAPMAP_H_	hapmap.h	19;"	d
__BackwardDNAOccCount	rbwt.c	/^static DECODE_TABLE_T __BackwardDNAOccCount(const unsigned int*  dna, const unsigned int index, $/;"	f	file:
__ForwardDNAOccCount	rbwt.c	/^static DECODE_TABLE_T __ForwardDNAOccCount(const unsigned int*  dna, const unsigned int index,$/;"	f	file:
__KSEQ_BASIC	kseq.h	151;"	d
__KSEQ_READ	kseq.h	171;"	d
__KSEQ_TYPE	kseq.h	213;"	d
__KS_BASIC	kseq.h	50;"	d
__KS_GETC	kseq.h	66;"	d
__KS_GETUNTIL	kseq.h	91;"	d
__KS_TYPE	kseq.h	40;"	d
__LOOLUPTABLE_H	LookUpTable.h	2;"	d
__QSUFSORT_H__	QSufSort.h	30;"	d
__get_pac	mixRef.c	95;"	d	file:
__kstring_t	kseq.h	/^typedef struct __kstring_t {$/;"	s
__occ_aux	bwt.c	/^static inline int __occ_aux(uint64_t y, int c)$/;"	f	file:
__occ_aux4	bwt.c	154;"	d	file:
__set_pac	mixRef.c	94;"	d	file:
_get_pac	4bit_bntseq.c	169;"	d	file:
_get_pac	LookUpTable.c	26;"	d	file:
_get_pac	test_fa2pac.c	21;"	d	file:
_set_pac	4bit_bntseq.c	168;"	d	file:
_set_pac	LookUpTable.c	25;"	d	file:
amb	bntseq.h	/^	char amb;$/;"	m	struct:__anon5
ambs	bntseq.h	/^	bntamb1_t *ambs; \/\/ n_holes elements$/;"	m	struct:__anon6
anno	bntseq.h	/^	char *name, *anno;$/;"	m	struct:__anon4
anns	bntseq.h	/^	bntann1_t *anns; \/\/ n_seqs elements$/;"	m	struct:__anon6
availableWord	4bit_bwt_gen.h	/^	unsigned int availableWord;$/;"	m	struct:BWTInc
availableWord	bwt_gen.h	/^	unsigned int availableWord;$/;"	m	struct:BWTInc
average	4bit_bwt_gen.h	51;"	d
average	bwt_gen.h	50;"	d
bns_coor_pac2real	bntseq.c	/^int bns_coor_pac2real(const bntseq_t *bns, int64_t pac_coor, int len, int32_t *real_seq)$/;"	f
bns_destroy	bntseq.c	/^void bns_destroy(bntseq_t *bns)$/;"	f
bns_dump	bntseq.c	/^void bns_dump(const bntseq_t *bns, const char *prefix)$/;"	f
bns_fasta2bntseq	bntseq.c	/^void bns_fasta2bntseq(gzFile fp_fa, const char *prefix)$/;"	f
bns_restore	bntseq.c	/^bntseq_t *bns_restore(const char *prefix)$/;"	f
bns_restore_core	bntseq.c	/^bntseq_t *bns_restore_core(const char *ann_filename, const char* amb_filename, const char* pac_filename)$/;"	f
bntamb1_t	bntseq.h	/^} bntamb1_t;$/;"	t	typeref:struct:__anon5
bntann1_t	bntseq.h	/^} bntann1_t;$/;"	t	typeref:struct:__anon4
bntseq_t	bntseq.h	/^} bntseq_t;$/;"	t	typeref:struct:__anon6
buildSize	4bit_bwt_gen.h	/^	unsigned int buildSize;$/;"	m	struct:BWTInc
buildSize	bwt_gen.h	/^	unsigned int buildSize;$/;"	m	struct:BWTInc
build_mixRef	mixRef.c	/^int build_mixRef(const char *fn_fa, const char *fn_hapmap, const char *fn_mixRef)$/;"	f
bwa_bwt2sa	bwtmisc.c	/^int bwa_bwt2sa(int argc, char *argv[])$/;"	f
bwa_bwtupdate	bwtmisc.c	/^int bwa_bwtupdate(int argc, char *argv[])$/;"	f
bwa_fa2pac	bntseq.c	/^int bwa_fa2pac(int argc, char *argv[])$/;"	f
bwa_pac2bwt	bwtmisc.c	/^int bwa_pac2bwt(int argc, char *argv[])$/;"	f
bwa_pac2cspac	bwtmisc.c	/^int bwa_pac2cspac(int argc, char *argv[])$/;"	f
bwa_pac2cspac_core	bwtmisc.c	/^uint8_t *bwa_pac2cspac_core(const bntseq_t *bns)$/;"	f
bwa_pac_rev	bwtmisc.c	/^int bwa_pac_rev(int argc, char *argv[])$/;"	f
bwa_pac_rev_core	bwtmisc.c	/^void bwa_pac_rev_core(const char *fn, const char *fn_rev)$/;"	f
bwa_seq_len	bwtmisc.c	/^int64_t bwa_seq_len(const char *fn_pac)$/;"	f
bwt	4bit_bwt_gen.h	/^	BWT *bwt;$/;"	m	struct:BWTInc
bwt	bwt.h	/^	uint32_t *bwt; \/\/ BWT$/;"	m	struct:__anon7
bwt	bwt_gen.h	/^	BWT *bwt;$/;"	m	struct:BWTInc
bwtCode	4bit_bwt_gen.h	/^	unsigned int *bwtCode;				\/\/ BWT code$/;"	m	struct:BWT
bwtCode	bwt_gen.h	/^	unsigned int *bwtCode;				\/\/ BWT code$/;"	m	struct:BWT
bwtCode	rbwt.h	/^	unsigned int *bwtCode;				\/\/ bwt_t code$/;"	m	struct:rbwt_t
bwtSizeInWord	4bit_bwt_gen.h	/^	unsigned int bwtSizeInWord;			\/\/ Temporary variable to hold the memory allocated$/;"	m	struct:BWT
bwtSizeInWord	bwt_gen.h	/^	unsigned int bwtSizeInWord;			\/\/ Temporary variable to hold the memory allocated$/;"	m	struct:BWT
bwtSizeInWord	rbwt.h	/^	unsigned int bwtSizeInWord;			\/\/ Temporary variable to hold the memory allocated$/;"	m	struct:rbwt_t
bwt_2occ	bwt.c	/^inline void bwt_2occ(const bwt_t *bwt, bwtint_t k, bwtint_t l, ubyte_t c, bwtint_t *ok, bwtint_t *ol)$/;"	f
bwt_2occ4	bwt.c	/^inline void bwt_2occ4(const bwt_t *bwt, bwtint_t k, bwtint_t l, bwtint_t cntk[4], bwtint_t cntl[4])$/;"	f
bwt_B0	bwt.h	61;"	d
bwt_B00	bwtmisc.c	119;"	d	file:
bwt_bwt	bwt.h	56;"	d
bwt_bwtgen	bwt_gen.c	/^void bwt_bwtgen(const char *fn_pac, const char *fn_bwt)$/;"	f
bwt_bwtgen_main	bwt_gen.c	/^int bwt_bwtgen_main(int argc, char *argv[])$/;"	f
bwt_bwtupdate_core	bwtmisc.c	/^void bwt_bwtupdate_core(bwt_t *bwt)$/;"	f
bwt_cal_sa	bwt.c	/^void bwt_cal_sa(bwt_t *bwt, int intv)$/;"	f
bwt_destroy	bwtio.c	/^void bwt_destroy(bwt_t *bwt)$/;"	f
bwt_dump_bwt	bwtio.c	/^void bwt_dump_bwt(const char *fn, const bwt_t *bwt)$/;"	f
bwt_dump_sa	bwtio.c	/^void bwt_dump_sa(const char *fn, const bwt_t *bwt)$/;"	f
bwt_gen_cnt_table	bwt.c	/^void bwt_gen_cnt_table(bwt_t *bwt)$/;"	f
bwt_invPsi	bwt.h	66;"	d
bwt_match_exact	bwt.c	/^int bwt_match_exact(const bwt_t *bwt, int len, const ubyte_t *str, bwtint_t *sa_begin, bwtint_t *sa_end)$/;"	f
bwt_match_exact_alt	bwt.c	/^int bwt_match_exact_alt(const bwt_t *bwt, int len, const ubyte_t *str, bwtint_t *k0, bwtint_t *l0)$/;"	f
bwt_occ	bwt.c	/^inline bwtint_t bwt_occ(const bwt_t *bwt, bwtint_t k, ubyte_t c)$/;"	f
bwt_occ4	bwt.c	/^inline void bwt_occ4(const bwt_t *bwt, bwtint_t k, bwtint_t cnt[4])$/;"	f
bwt_occ_intv	bwt.h	63;"	d
bwt_pac2bwt	bwtmisc.c	/^bwt_t *bwt_pac2bwt(const char *fn_pac, int use_is)$/;"	f
bwt_restore_bwt	bwtio.c	/^bwt_t *bwt_restore_bwt(const char *fn)$/;"	f
bwt_restore_sa	bwtio.c	/^void bwt_restore_sa(const char *fn, bwt_t *bwt)$/;"	f
bwt_sa	bwt.c	/^bwtint_t bwt_sa(const bwt_t *bwt, bwtint_t k)$/;"	f
bwt_size	bwt.h	/^	bwtint_t bwt_size; \/\/ size of bwt, about seq_len\/4$/;"	m	struct:__anon7
bwt_t	bwt.h	/^} bwt_t;$/;"	t	typeref:struct:__anon7
bwtint_t	bwt.h	/^typedef uint32_t bwtint_t;$/;"	t
ceilLog2	4bit_bwt_gen.c	/^static unsigned int ceilLog2(const unsigned int input)$/;"	f	file:
ceilLog2	bwt_gen.c	/^static unsigned int ceilLog2(const unsigned int input)$/;"	f	file:
chr	is.c	30;"	d	file:
chrID	hapmap.h	/^    char *chrID;$/;"	m	struct:__anon1
cnt_table	bwt.h	/^	uint32_t cnt_table[256];$/;"	m	struct:__anon7
cputime	utils.c	/^double cputime()$/;"	f
cumulativeCountInCurrentBuild	4bit_bwt_gen.h	/^	unsigned int *cumulativeCountInCurrentBuild;$/;"	m	struct:BWTInc
cumulativeCountInCurrentBuild	bwt_gen.h	/^	unsigned int *cumulativeCountInCurrentBuild;$/;"	m	struct:BWTInc
cumulativeFreq	4bit_bwt_gen.h	/^	unsigned int *cumulativeFreq;		\/\/ cumulative frequency$/;"	m	struct:BWT
cumulativeFreq	bwt_gen.h	/^	unsigned int *cumulativeFreq;		\/\/ cumulative frequency$/;"	m	struct:BWT
cumulativeFreq	rbwt.h	/^	unsigned int *cumulativeFreq;		\/\/ cumulative frequency$/;"	m	struct:rbwt_t
decodeTable	4bit_bwt_gen.h	/^	DECODE_TABLE_T  *decodeTable;			\/\/ For decoding BWT by table lookup$/;"	m	struct:BWT
decodeTable	bwt_gen.h	/^	unsigned int *decodeTable;			\/\/ For decoding BWT by table lookup$/;"	m	struct:BWT
decodeTable	rbwt.h	/^	DECODE_TABLE_T  *decodeTable;			\/\/ For decoding bwt_t by table lookup$/;"	m	struct:rbwt_t
decodeTableGenerated	4bit_bwt_gen.h	/^    unsigned int decodeTableGenerated;	\/\/ == TRUE if decode table is generated on load and will be freed$/;"	m	struct:BWT
decodeTableGenerated	bwt_gen.h	/^	unsigned int decodeTableGenerated;	\/\/ == TRUE if decode table is generated on load and will be freed$/;"	m	struct:BWT
decodeTableGenerated	rbwt.h	/^    unsigned int decodeTableGenerated;	\/\/ == TRUE if decode table is generated on load and will be freed$/;"	m	struct:rbwt_t
endSaIndex	4bit_bwt_gen.h	/^	unsigned int endSaIndex;$/;"	m	struct:SaIndexRange
endSaIndex	bwt_gen.h	/^	unsigned int endSaIndex;$/;"	m	struct:SaIndexRange
endSaIndex	rbwt.h	/^	unsigned int endSaIndex;$/;"	m	struct:SaIndexRange
err_fatal	utils.c	/^void err_fatal(const char *header, const char *fmt, ...)$/;"	f
err_fatal_simple	utils.h	43;"	d
err_fatal_simple_core	utils.c	/^void err_fatal_simple_core(const char *func, const char *msg)$/;"	f
err_fclose	utils.c	/^int err_fclose(FILE *stream) $/;"	f
err_fflush	utils.c	/^int err_fflush(FILE *stream) $/;"	f
err_fprintf	utils.c	/^int err_fprintf(FILE *stream, const char *format, ...) $/;"	f
err_fwrite	utils.c	/^size_t err_fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream)$/;"	f
err_printf	utils.c	/^int err_printf(const char *format, ...) $/;"	f
err_xopen_core	utils.c	/^FILE *err_xopen_core(const char *func, const char *fn, const char *mode)$/;"	f
err_xreopen_core	utils.c	/^FILE *err_xreopen_core(const char *func, const char *fn, const char *mode, FILE *fp)$/;"	f
err_xzopen_core	utils.c	/^gzFile err_xzopen_core(const char *func, const char *fn, const char *mode)$/;"	f
firstCharInLastIteration	4bit_bwt_gen.h	/^	unsigned int firstCharInLastIteration;$/;"	m	struct:BWTInc
firstCharInLastIteration	bwt_gen.h	/^	unsigned int firstCharInLastIteration;$/;"	m	struct:BWTInc
fp_hapmap	hapmap.h	/^    FILE *fp_hapmap;$/;"	m	struct:__anon1
fp_pac	bntseq.h	/^	FILE *fp_pac;$/;"	m	struct:__anon6
getBuckets	is.c	/^static void getBuckets(const int *C, int *B, int k, int end)$/;"	f	file:
getCounts	is.c	/^static void getCounts(const unsigned char *T, int *C, int n, int k, int cs)$/;"	f	file:
gi	bntseq.h	/^	uint32_t gi;$/;"	m	struct:__anon4
hapmap_destroy	hapmap.c	/^void hapmap_destroy(hapmap_t *hm)$/;"	f
hapmap_get_snpnum	hapmap.c	/^int hapmap_get_snpnum(hapmap_t *hm)$/;"	f
hapmap_get_snptype	hapmap.h	/^static inline uint8_t hapmap_get_snptype(const uint8_t snptype, const uint8_t snp_type_iter)$/;"	f
hapmap_get_snptypenum	hapmap.h	/^static inline int hapmap_get_snptypenum(uint8_t snp_type)$/;"	f
hapmap_init	hapmap.c	/^hapmap_t *hapmap_init(FILE *fp)$/;"	f
hapmap_nt2snptypei	hapmap.c	/^uint8_t hapmap_nt2snptypei(uint8_t snptype, const uint8_t ref_nt)$/;"	f
hapmap_readhm	hapmap.c	/^int hapmap_readhm(hapmap_t *hm)$/;"	f
hapmap_t	hapmap.h	/^} hapmap_t;$/;"	t	typeref:struct:__anon1
incMaxBuildSize	4bit_bwt_gen.h	/^	unsigned int incMaxBuildSize;$/;"	m	struct:BWTInc
incMaxBuildSize	bwt_gen.h	/^	unsigned int incMaxBuildSize;$/;"	m	struct:BWTInc
index_main	index1.c	/^int index_main(int argc, char *argv[])$/;"	f
index_usage	index1.c	/^static int index_usage()$/;"	f	file:
induceSA	is.c	/^static void induceSA(const unsigned char *T, int *SA, int *C, int *B, int n, int k, int cs)$/;"	f	file:
initialMaxBuildSize	4bit_bwt_gen.h	/^	unsigned int initialMaxBuildSize;$/;"	m	struct:BWTInc
initialMaxBuildSize	bwt_gen.h	/^	unsigned int initialMaxBuildSize;$/;"	m	struct:BWTInc
initializeVAL	4bit_bwt_gen.c	/^static void initializeVAL(unsigned int *startAddr, const unsigned int length, const unsigned int initValue)$/;"	f	file:
initializeVAL	bwt_gen.c	/^static void initializeVAL(unsigned int *startAddr, const unsigned int length, const unsigned int initValue)$/;"	f	file:
initializeVAL	rbwt.c	/^static void initializeVAL(unsigned int *startAddr, const unsigned int length, const unsigned int initValue)$/;"	f	file:
inverseSa	4bit_bwt_gen.h	/^	unsigned int *inverseSa;			\/\/ Inverse SA stored explicitly$/;"	m	struct:BWT
inverseSa	bwt_gen.h	/^	unsigned int *inverseSa;			\/\/ Inverse SA stored explicitly$/;"	m	struct:BWT
inverseSa0	4bit_bwt_gen.h	/^	unsigned int inverseSa0;			\/\/ SA-1[0]$/;"	m	struct:BWT
inverseSa0	bwt_gen.h	/^	unsigned int inverseSa0;			\/\/ SA-1[0]$/;"	m	struct:BWT
inverseSa0	rbwt.h	/^	unsigned int inverseSa0;			\/\/ SA-1[0]$/;"	m	struct:rbwt_t
inverseSaInterval	4bit_bwt_gen.h	/^	unsigned int inverseSaInterval;		\/\/ interval between two inverse SA stored explicitly$/;"	m	struct:BWT
inverseSaInterval	bwt_gen.h	/^	unsigned int inverseSaInterval;		\/\/ interval between two inverse SA stored explicitly$/;"	m	struct:BWT
inverseSaSize	4bit_bwt_gen.h	/^    unsigned int inverseSaSize;			\/\/ Temporary variable to hold the memory allocated$/;"	m	struct:BWT
inverseSaSize	bwt_gen.h	/^	unsigned int inverseSaSize;			\/\/ Temporary variable to hold the memory allocated$/;"	m	struct:BWT
is_bwt	is.c	/^int is_bwt(ubyte_t *T, int n)$/;"	f
is_sa	is.c	/^int is_sa(const ubyte_t *T, int *SA, int n)$/;"	f
item	LookUpTable.h	/^    uint32_t *item;$/;"	m	struct:__anon2
kroundup32	kseq.h	88;"	d
ks_eof	kseq.h	47;"	d
ks_rewind	kseq.h	48;"	d
kseq_rewind	kseq.h	149;"	d
kstring_t	kseq.h	/^} kstring_t;$/;"	t	typeref:struct:__kstring_t
l	kseq.h	/^	size_t l, m;$/;"	m	struct:__kstring_t
l	mixRef.h	/^    uint32_t l;$/;"	m	struct:__anon3
l_pac	bntseq.h	/^	int64_t l_pac;$/;"	m	struct:__anon6
leadingZero	4bit_bwt_gen.c	/^static unsigned int leadingZero(const unsigned int input)$/;"	f	file:
leadingZero	QSufSort.c	/^static unsigned int leadingZero(const unsigned int input) {$/;"	f	file:
leadingZero	bwt_gen.c	/^unsigned int leadingZero(const unsigned int input)$/;"	f
len	bntseq.h	/^	int32_t len;$/;"	m	struct:__anon4
len	bntseq.h	/^	int32_t len;$/;"	m	struct:__anon5
lookupTable_t	LookUpTable.h	/^} lookupTable_t;$/;"	t	typeref:struct:__anon2
m	kseq.h	/^	size_t l, m;$/;"	m	struct:__kstring_t
main	4bit_bwt_gen.c	/^int main(int argc, char *argv[])$/;"	f
main	LookUpTable.c	/^int main(int argc, char *argv[])$/;"	f
main	bwt_gen.c	/^int main(int argc, char *argv[])$/;"	f
main	hapmap.c	/^int main()$/;"	f
main	index1.c	/^int main ( int argc, char *argv[] )$/;"	f
main	localPattern.c	/^int main(int argc, char *argv[])$/;"	f
main	mixRef.c	/^int main(int argc, char *argv[])$/;"	f
main	snpSeg.c	/^int main(int argc, char *argv[])$/;"	f
main	test_fa2pac.c	/^int main(int argc, char *argv[])$/;"	f
max	4bit_bwt_gen.h	53;"	d
max	bwt_gen.h	52;"	d
maxLookupLen	LookUpTable.h	/^    uint32_t maxLookupLen;$/;"	m	struct:__anon2
maxLookupLen	index1.c	/^int maxLookupLen = 12;$/;"	v
med3	4bit_bwt_gen.h	54;"	d
med3	bwt_gen.h	53;"	d
min	4bit_bwt_gen.h	52;"	d
min	bwt_gen.h	51;"	d
mixRef_destroy	mixRef.c	/^void mixRef_destroy(mixRef_t *mixRef)$/;"	f
mixRef_restore	mixRef.c	/^mixRef_t *mixRef_restore(const char *fn)$/;"	f
mixRef_t	mixRef.h	/^} mixRef_t;$/;"	t	typeref:struct:__anon3
n	rbwt.h	/^    int n;$/;"	m	struct:sharp2Ri_t
n_ambs	bntseq.h	/^	int32_t n_ambs;$/;"	m	struct:__anon4
n_holes	bntseq.h	/^	int32_t n_holes;$/;"	m	struct:__anon6
n_item	LookUpTable.h	/^    uint32_t n_item;$/;"	m	struct:__anon2
n_sa	bwt.h	/^	bwtint_t n_sa;$/;"	m	struct:__anon7
n_seqs	bntseq.h	/^	int32_t n_seqs;$/;"	m	struct:__anon6
name	bntseq.h	/^	char *name, *anno;$/;"	m	struct:__anon4
nst_color_space_table	bwtmisc.c	/^const int nst_color_space_table[] = { 4, 0, 0, 1, 0, 2, 3, 4, 0, 3, 2, 4, 1, 4, 4, 4};$/;"	v
nst_nt4_table	hapmap.c	/^static unsigned char nst_nt4_table[256] = {$/;"	v	file:
nt5_4bit_table	mixRef.c	/^static uint8_t nt5_4bit_table[256] = {$/;"	v	file:
numOf1	hapmap.h	/^static int numOf1[16] = {  0, 1, 1, 2,$/;"	v
numberOfIterationDone	4bit_bwt_gen.h	/^	unsigned int numberOfIterationDone;$/;"	m	struct:BWTInc
numberOfIterationDone	bwt_gen.h	/^	unsigned int numberOfIterationDone;$/;"	m	struct:BWTInc
occMajorSizeInWord	4bit_bwt_gen.h	/^	unsigned int occMajorSizeInWord;	\/\/ Temporary variable to hold the memory allocated$/;"	m	struct:BWT
occMajorSizeInWord	bwt_gen.h	/^	unsigned int occMajorSizeInWord;	\/\/ Temporary variable to hold the memory allocated$/;"	m	struct:BWT
occMajorSizeInWord	rbwt.h	/^	unsigned int occMajorSizeInWord;	\/\/ Temporary variable to hold the memory allocated$/;"	m	struct:rbwt_t
occSizeInWord	4bit_bwt_gen.h	/^	unsigned int occSizeInWord;			\/\/ Temporary variable to hold the memory allocated$/;"	m	struct:BWT
occSizeInWord	bwt_gen.h	/^	unsigned int occSizeInWord;			\/\/ Temporary variable to hold the memory allocated$/;"	m	struct:BWT
occSizeInWord	rbwt.h	/^	unsigned int occSizeInWord;			\/\/ Temporary variable to hold the memory allocated$/;"	m	struct:rbwt_t
occValue	4bit_bwt_gen.h	/^	unsigned int *occValue;				\/\/ Occurrence values stored explicitly$/;"	m	struct:BWT
occValue	bwt_gen.h	/^	unsigned int *occValue;				\/\/ Occurrence values stored explicitly$/;"	m	struct:BWT
occValue	rbwt.h	/^	unsigned int *occValue;				\/\/ Occurrence values stored explicitly$/;"	m	struct:rbwt_t
occValueMajor	4bit_bwt_gen.h	/^	unsigned int *occValueMajor;		\/\/ Occurrence values stored explicitly$/;"	m	struct:BWT
occValueMajor	bwt_gen.h	/^	unsigned int *occValueMajor;		\/\/ Occurrence values stored explicitly$/;"	m	struct:BWT
occValueMajor	rbwt.h	/^	unsigned int *occValueMajor;		\/\/ Occurrence values stored explicitly$/;"	m	struct:rbwt_t
offset	bntseq.h	/^	int64_t offset;$/;"	m	struct:__anon4
offset	bntseq.h	/^	int64_t offset;$/;"	m	struct:__anon5
packedShift	4bit_bwt_gen.h	/^	unsigned int *packedShift;$/;"	m	struct:BWTInc
packedShift	bwt_gen.h	/^	unsigned int *packedShift;$/;"	m	struct:BWTInc
packedText	4bit_bwt_gen.h	/^	unsigned int *packedText;$/;"	m	struct:BWTInc
packedText	bwt_gen.h	/^	unsigned int *packedText;$/;"	m	struct:BWTInc
primary	bwt.h	/^	bwtint_t primary; \/\/ S^{-1}(0), or the primary index of BWT$/;"	m	struct:__anon7
rbwt0	rbwt.h	/^    rbwt_t *rbwt0, *rbwt1;\/\/forward rbwt && backward rbwt$/;"	m	struct:rbwt2_t
rbwt1	rbwt.h	/^    rbwt_t *rbwt0, *rbwt1;\/\/forward rbwt && backward rbwt$/;"	m	struct:rbwt2_t
rbwt2_t	rbwt.h	/^typedef struct rbwt2_t{$/;"	s
rbwt2_t	rbwt.h	/^} rbwt2_t;$/;"	t	typeref:struct:rbwt2_t
rbwt_t	rbwt.h	/^typedef struct rbwt_t {$/;"	s
rbwt_t	rbwt.h	/^} rbwt_t;$/;"	t	typeref:struct:rbwt_t
realtime	utils.c	/^double realtime()$/;"	f
s	kseq.h	/^	char *s;$/;"	m	struct:__kstring_t
sa	bwt.h	/^	bwtint_t *sa;$/;"	m	struct:__anon7
saIndexRange	4bit_bwt_gen.h	/^	SaIndexRange *saIndexRange;			\/\/ SA index range$/;"	m	struct:BWT
saIndexRange	bwt_gen.h	/^	SaIndexRange *saIndexRange;			\/\/ SA index range$/;"	m	struct:BWT
saIndexRangeNumOfChar	4bit_bwt_gen.h	/^	int saIndexRangeNumOfChar;			\/\/ Number of characters indexed in SA index range$/;"	m	struct:BWT
saIndexRangeNumOfChar	bwt_gen.h	/^	int saIndexRangeNumOfChar;			\/\/ Number of characters indexed in SA index range$/;"	m	struct:BWT
saIndexRangeSize	4bit_bwt_gen.h	/^	unsigned int saIndexRangeSize;		\/\/ Temporary variable to hold the memory allocated$/;"	m	struct:BWT
saIndexRangeSize	bwt_gen.h	/^	unsigned int saIndexRangeSize;		\/\/ Temporary variable to hold the memory allocated$/;"	m	struct:BWT
saInterval	4bit_bwt_gen.h	/^	unsigned int saInterval;			\/\/ interval between two SA values stored explicitly$/;"	m	struct:BWT
saInterval	bwt_gen.h	/^	unsigned int saInterval;			\/\/ interval between two SA values stored explicitly$/;"	m	struct:BWT
saInterval	rbwt.h	/^	unsigned int saInterval;			\/\/ interval between two SA values stored explicitly$/;"	m	struct:rbwt_t
saValue	4bit_bwt_gen.h	/^	unsigned int *saValue;    \/\/ SA values stored explicitly$/;"	m	struct:BWT
saValue	bwt_gen.h	/^	unsigned int *saValue;				\/\/ SA values stored explicitly$/;"	m	struct:BWT
saValueOnBoundary	4bit_bwt_gen.h	/^	unsigned int *saValueOnBoundary;	\/\/ Pre-calculated frequently referred data$/;"	m	struct:BWT
saValueOnBoundary	bwt_gen.h	/^	unsigned int *saValueOnBoundary;	\/\/ Pre-calculated frequently referred data$/;"	m	struct:BWT
saValueSharp	4bit_bwt_gen.h	/^    unsigned int *saValueSharp;$/;"	m	struct:BWT
saValueSharp	rbwt.h	/^    unsigned int *saValueSharp;$/;"	m	struct:rbwt_t
saValueSize	4bit_bwt_gen.h	/^	unsigned int saValueSize;			\/\/ Temporary variable to hold the memory allocated$/;"	m	struct:BWT
saValueSize	bwt_gen.h	/^	unsigned int saValueSize;			\/\/ Temporary variable to hold the memory allocated$/;"	m	struct:BWT
saValueSizeSharp	4bit_bwt_gen.h	/^	unsigned int saValueSizeSharp;$/;"	m	struct:BWT
saValueSizeSharp	rbwt.h	/^	unsigned int saValueSizeSharp;$/;"	m	struct:rbwt_t
sa_intv	bwt.h	/^	int sa_intv;$/;"	m	struct:__anon7
sais_main	is.c	/^static int sais_main(const unsigned char *T, int *SA, int fs, int n, int k, int cs)$/;"	f	file:
seed	bntseq.h	/^	uint32_t seed;$/;"	m	struct:__anon6
seq	mixRef.h	/^    uint32_t *seq;$/;"	m	struct:__anon3
seq_len	bwt.h	/^	bwtint_t seq_len; \/\/ sequence length$/;"	m	struct:__anon7
sharp2Ri_array	rbwt.h	/^    int *sharp2Ri_array;$/;"	m	struct:sharp2Ri_t
sharp2Ri_t	rbwt.h	/^typedef struct sharp2Ri_t{$/;"	s
sharp2Ri_t	rbwt.h	/^} sharp2Ri_t;$/;"	t	typeref:struct:sharp2Ri_t
snp_num	hapmap.h	/^    uint32_t snp_num;$/;"	m	struct:__anon1
snp_pos	hapmap.h	/^    uint32_t *snp_pos;$/;"	m	struct:__anon1
snp_type	hapmap.h	/^    uint8_t *snp_type;$/;"	m	struct:__anon1
snptype_map0	hapmap.h	/^static uint8_t snptype_map0[16] ={  4, 0, 1, 0, $/;"	v
snptype_map1	hapmap.h	/^static uint8_t snptype_map1[16] ={  4, 4, 4, 1, $/;"	v
snptype_map2	hapmap.h	/^static uint8_t snptype_map2[16] ={  4, 4, 4, 4,$/;"	v
snptype_map3	hapmap.h	/^static uint8_t snptype_map3[16] ={  4, 4, 4, 4,$/;"	v
ss_main	localPattern.c	/^int ss_main(int argc, char *argv[])$/;"	f
ss_main	snpSeg.c	/^int ss_main(int argc, char *argv[])$/;"	f
startSaIndex	4bit_bwt_gen.h	/^	unsigned int startSaIndex;$/;"	m	struct:SaIndexRange
startSaIndex	bwt_gen.h	/^	unsigned int startSaIndex;$/;"	m	struct:SaIndexRange
startSaIndex	rbwt.h	/^	unsigned int startSaIndex;$/;"	m	struct:SaIndexRange
swap	4bit_bwt_gen.h	55;"	d
swap	bwt_gen.h	54;"	d
targetNBit	4bit_bwt_gen.h	/^	float targetNBit;$/;"	m	struct:BWTInc
targetNBit	bwt_gen.h	/^	float targetNBit;$/;"	m	struct:BWTInc
targetTextLength	4bit_bwt_gen.h	/^	unsigned int targetTextLength;$/;"	m	struct:BWTInc
targetTextLength	bwt_gen.h	/^	unsigned int targetTextLength;$/;"	m	struct:BWTInc
textBuffer	4bit_bwt_gen.h	/^	unsigned char *textBuffer;$/;"	m	struct:BWTInc
textBuffer	bwt_gen.h	/^	unsigned char *textBuffer;$/;"	m	struct:BWTInc
textLength	4bit_bwt_gen.h	/^	unsigned int textLength;			\/\/ length of the text$/;"	m	struct:BWT
textLength	bwt_gen.h	/^	unsigned int textLength;			\/\/ length of the text$/;"	m	struct:BWT
textLength	rbwt.h	/^	unsigned int textLength;			\/\/ length of the text$/;"	m	struct:rbwt_t
truncateLeft	4bit_bwt_gen.h	56;"	d
truncateLeft	bwt_gen.h	55;"	d
truncateRight	4bit_bwt_gen.h	57;"	d
truncateRight	bwt_gen.h	56;"	d
ubyte_t	bntseq.h	/^typedef uint8_t ubyte_t;$/;"	t
ubyte_t	bwt.h	/^typedef unsigned char ubyte_t;$/;"	t
ubyte_t	is.c	/^typedef unsigned char ubyte_t;$/;"	t	file:
usage	mixRef.c	/^static int usage()$/;"	f	file:
workingMemory	4bit_bwt_gen.h	/^	unsigned int *workingMemory;$/;"	m	struct:BWTInc
workingMemory	bwt_gen.h	/^	unsigned int *workingMemory;$/;"	m	struct:BWTInc
xassert	utils.h	47;"	d
xopen	utils.h	44;"	d
xreopen	utils.h	45;"	d
xzopen	utils.h	46;"	d
